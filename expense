#! /usr/bin/env ruby
# frozen_string_literal: true

require 'pg'
require 'io/console'

# Class Interacting with the PostgreSQL Database
class ExpenseData
  def initialize
    @connection = PG.connect(dbname: 'expenses')
    setup_schema
  end

  def list_expenses
    result = @connection.exec('SELECT * FROM expenses ORDER BY created_on ASC')
    display_count(result)
    display_expenses(result) if result.ntuples.positive?
  end

  def add_expense(amount, memo)
    abort 'You must provide an amount and memo.' unless amount && memo
    date = Date.today
    sql = 'INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)'
    @connection.exec_params(sql, [amount, memo, date])
  end

  def search_expenses(query)
    sql = 'SELECT * FROM expenses WHERE memo ILIKE $1'
    result = @connection.exec_params(sql, ["%#{query}%"])
    display_count(result)
    display_expenses(result) if result.ntuples.positive?
  end

  def delete_expense(id)
    sql = 'SELECT * FROM expenses WHERE id = $1'
    result = @connection.exec_params(sql, [id])

    if result.ntuples == 1
      sql = 'DELETE FROM expenses WHERE id=$1'
      @connection.exec_params(sql, [id])

      puts 'The following expense has been deleted:'
      display_expenses(result)
    else
      puts "There is no expense with the id '#{id}'."
    end
  end

  def delete_all_expenses
    puts 'This will remove all expenses. Are you sure? (y/n)'
    response = $stdin.getch
    return unless response.downcase == 'y'

    @connection.exec('DELETE FROM expenses')
    puts 'All expenses have been deleted.'
  end

  def setup_schema
    sql_count = "SELECT COUNT(*) FROM information_schema.tables
                 WHERE table_schema = 'public'
                 AND table_name = 'expenses';"
    result = @connection.exec(sql_count)
    return unless result.values[0][0] == '0'

    schema_temporal = File.open('schema.sql')
    sql = schema_temporal.read
    @connection.exec(sql)
    schema_temporal.close

    puts 'The table expenses have been created.'
  end

  private

  def display_count(expenses)
    count = expenses.ntuples
    if count.zero?
      puts 'There are no expenses.'
    else
      puts "There are #{count} expense#{'s' if count != 1}."
    end
  end

  # rubocop:disable Metrics/AbcSize
  def display_expenses(expenses)
    expenses.each do |tuple|
      columns = [tuple['id'].rjust(3), tuple['created_on'].rjust(10),
                 tuple['amount'].rjust(12), tuple['memo']]
      puts columns.join(' | ')
    end

    puts '-' * 50
    amount_sum = expenses.field_values('amount').map(&:to_f).inject(:+)
    puts "Total #{amount_sum.to_s.rjust(25)}"
  end
  # rubocop:enable Metrics/AbcSize
end

# Class Processing CLI Arguments
class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(arguments)
    amount = arguments[0]
    memo = arguments[1]
    command = arguments.shift

    case command
    when 'add' then @application.add_expense(amount, memo)
    when 'delete' then @application.delete_expense(amount)
    when 'clear' then @application.delete_all_expenses
    when 'list' then @application.list_expenses
    when 'search' then @application.search_expenses(amount)
    else display_help end
  end

  def display_help
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end

CLI.new.run(ARGV)
